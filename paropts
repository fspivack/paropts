#!/bin/bash
# Copyright (C) 2025 Francesca Spivack
# This program is licensed under the GNU General Public License version 3.
# See the LICENSE file or <https://www.gnu.org/licenses/>.

# Parse single-dashed and double-dashed options

# "paropts_setup" is only necessary if using a usage function

# This is very messy, partly due to the fact that it was orginally intended for
# a very different method of input. However, both the interace for the user and
# the interface for *their* user is neat. I may refactor this a bit, but the
# interface will stay the same

# UPDATE: Cleaned up and decoupled the strings for output from the logic

# todo: Sanitise options etc.??? If so, it should mostly affect list of options
# todo: Potentially check use of -n/--name-arg against whether the option
# actually takes an argument

_checkargs() {
    # Check arguments to this script, for options requiring an argument
    #
    # Note: Originally had "found" flag. Unnecessary because if not found, exit
    # with error
    if [[ -z "$2" ]]; then
        printf "ERROR: Option %s requires an argument\n" "$1" >&2
        exit 1
    elif [[ "$2" =~ ^- ]]; then
        printf "ERROR: Option %s requires an argument; got option %s instead\n" "$1" "$2" >&2
        exit 1
    fi
}

_option_setup_string() {
    # Prints the setup to the parse_options function output
    #
    # $1 is the short (dashed) option if it exists
    # $2 is the long (double-dashed) option if it exists
    if [[ -z "$1" || -z "$2" ]]; then
        divider=""
    else
        divider="|"
    fi
    printf "\n                %s%s%s)\n" "$1" "$divider" "$2"
}

_requires_arg_string() {
    # Prints the argument-checking code for the parse_options function output
    #
    # $1 is the variable name associated with the option
    #
    # If not bool, object if user uses option but doesn't supply arg
    printf "
                    if [[ -z \"\$2\" ]]; then
                        printf \"ERROR: Option %%s requires an argument\\\n\" \"\$1\" >&2
                        exit 1
                    elif [[ \"\$2\" =~ ^- ]]; then
                        printf \"ERROR: Option %%s requires an argument; got option %%s instead\\\n\" \"\$1\" \"\$2\" >&2
                        exit 1
                    else
                        %s=\"\$2\"
                        shift
                        shift
                    fi
                    ;;" "$1"
}

_no_arg_string() {
    # Prints the code for options not requiring an argument for parse_options
    #
    # $1 is the variable name associated with the option
    printf "
                    %s=true
                    shift
                    ;;" "$1"
}

_default_string() {
    # Prints the code for managing defaults (or unsetting if no default) for parse_options
    #
    # $1 is opt name
    # $2 is unset - true or false (for argument-taking variables which don't have a default)
    # $3 is default (false for bools)
    if [[ "$2" == true ]]; then
        printf "
    unset %s" "$1"
    else
        printf "
    %s=\"%s\"" "$1" "$3"
    fi
}

_handle_required_string() {
    # Prints the code handling missing required opts for parse_options
    #
    # $1 is option name
    # $2 is short dashed option (if exists)
    # $3 is long double dashed option (if exists)
    printf "
    if [[ ! -v %s ]]; then
        printf \"ERROR: Missing required option: %s %s\\\n\" >&2
        exit 1
    fi
" "$1" "$2" "$3"
}

_parse_func_string() {
    # Prints the final code for parse_options output
    #
    # Rename variables for clarity
    defaults="$1"
    options_list="$2"
    handle_required="$3"
    include_help="$4"
    help_option=""
    help_suggestion=""
    if [[ "$include_help" == true ]]; then
        help_option="
                --help)
                    paropts_usage
                    break
                    ;;"
        help_suggestion="
                    printf \"Type 'paropts-test --help' for usage\\n\" >&2"
    fi
    parse_func="#!/bin/bash

parse_options() {
    # List to contain positional arguments (not values for options)
    positional=()

    # Set defaults - they only get overwriten if the user supplies the args
$defaults
    # Options
    while [[ \$# -gt 0 ]]; do  # loop through all arguments
        if [[ \"\$1\" =~ ^- ]]; then  # sort those starting with a dash
            case \"\$1\" in
$options_list
$help_option

                --)
                    shift
                    break
                    ;;
                *)
                    printf \"ERROR: Incorrect option %s\n\" \"\$1\" >&2

$help_suggestion

                    exit 1
                    ;;
            esac
        else
            positional+=(\"\$1\")
            shift
        fi
    done
    while [[ \$# -gt 0 ]]; do
        # Deal with positional arguments after --
        positional+=(\"\$1\")
        shift
    done

$handle_required

}
"
    printf "%s\n" "$parse_func" > "$options_filename"
}

_usage_wrap_string() {
    # Prints the code for wrapping a long string according to the user's terminal width
    # This is for the paropts_usage function output
    #
    # $1 is the option explanation
    printf "
    wrapped_desc=\$(echo \"$1\" | fold -s -w \$((columns - padding)) | sed \"2,\\\$s/^/\$(printf '%%*s' \$padding)/\")"
}

_usage_print_string() {
    # Prints the code for printing explanations in paropts_usage
    #
    # $1 is short (as in short option - may not have one)
    # $2 is comma (empty or a comma)
    # $3 is long (as in long option - may not have one)
    # $4 is argname for output
    #
    # %-20s reserves 20 characters for the option fields, left-aligned
    # Note that, if there's no short or no long, they just won't be printed
    printf "
    printf \"  %%-6s %%-20s %%s\\\n\" \"%s\" \"%s\" \"\$wrapped_desc\"" "$1$2" "$3$4"
}

_usage_print_long_string() {
    # Prints the code for when the option names are longer than allowed for, so
    # we want the option explanation starting on the next line (for paropts_usage)
    #
    # $1 is short (as in short option - may not have one)
    # $2 is comma (empty or a comma)
    # $3 is long (as in long option - may not have one)
    # $4 is argname for output
    printf "
    printf \"  %%-6s %%-20s\\\n\" \"%s%s\" \"%s\"
    printf \"%%${padding}s%%s\\\n\" \"\" \"\$wrapped_desc\"" "$1" "$2" "$3$4"
}

_set_usage_function() {
    # Prints the final code for paropts_usage output
    #
    # $1 is command name
    # $2  description of cmd (optional, but recommended)
    # $3 is usage line (optional)
    # $4 is pre-message (optional)
    # $5 is post-message (optional)
    # $6 is the actual usage content
    if [[ -n "$3" ]]; then
        usage_line="$3"
    else
        usage_line="USAGE: $1 [OPTIONS]"
    fi
    simple_usage_func="

paropts_usage() {

    # Get terminal width
    columns=\${PAROPTS_TEST_COLUMNS:-\$(stty size 2>/dev/null | awk '{print \$2}')}
    : \"\${columns:=80}\"  # fallback in case stty fails silently

    padding=$padding

    printf \"$4\\n\"
    printf \"$usage_line\\n\\n\"
    printf \"$2\\n\\n\"
    printf \"Options\\n\"
$6
    printf \"$5\\n\"
    # Clean exit
    exit 0
}
"
    printf "%s" "$simple_usage_func" >> "$options_filename"
}

_paropts_add_all() {
    # Note: Options will be sorted alphabetically according to their names, not
    # the actual options

    # Note that we're creating/updating both "options_content" and
    # "usage_content" simultaneously, among other vars

    # Clear variables in case used before
    options_content=""
    usage_content=""
    description=""
    defaults=""
    handle_required=""
    
    declare -n data=$1

    # Sort keys, because associative array doesn't preserve order
    keys=()
    for key in "${!data[@]}"; do
        keys+=("$key")
    done
    IFS=$'\n' sorted_keys=($(sort <<<"${keys[*]}"))
    unset IFS
        
    for opt_name in "${sorted_keys[@]}"; do  # loop through keys in assoc array

        # If option doesn't start and end '_' ...
        if [[ ! "$opt_name" =~ ^_.*_$ ]]; then
            if [[ "${data[_has_usage_]}" == true ]]; then
                # If data includes description for this option...
                if [[ -v data["_${opt_name}_explanation_"] ]]; then
                    opt_exp="${data["_${opt_name}_explanation_"]}"
                else
                    printf "WARNING: No explanation provided for %s\n" "$opt_name" >&2
                    opt_exp=""
                fi
            fi
            opt_vals=(${data[$opt_name]}) # remember we split this before
            opt_val1="${opt_vals[0]}"
            # Clear from previous use
            unset short
            unset long
            if [ -v opt_vals[1] ]; then
                comma="," # for usage function - if 2 opts, need a comma between
                opt_val2="${opt_vals[1]}"
                # We discard further options, assuming only two
                # Now we get the shorter and longer option names, adding two
                # dashes to those which are longer than one character, and one
                # dash to one which is only one character
                if [[ "${#opt_val1}" < "${#opt_val2}" ]]; then
                    if [[ "${#opt_val1}" -eq 1 ]]; then
                        short="-${opt_val1}"
                    else
                        short="--${opt_val1}"
                    fi
                    long="--${opt_val2}"
                else
                    if [[ "${#opt_val2}" -eq 1 ]]; then
                        short="-${opt_val2}"
                    else
                        short="--${opt_val2}"
                    fi
                    long="--${opt_val1}"
                fi
            else
                comma=""
                if [[ "${#opt_val1}" -eq 1 ]]; then
                    short="-${opt_val1}"
                else
                    long="--${opt_val1}"
                fi
            fi
            # Get the name of the argument if applicable (for paropts_usage)
            if [[ -v data["_${opt_name}_name_arg_"] ]]; then
                argname="=${data[_${opt_name}_name_arg_]}"
            else
                argname=""
            fi
            shortlen=6
            longlen=20
            (( reserved = shortlen + longlen ))
            # The "+ 4" is becasue of the added space characters in the printf
            (( padding = reserved + 4 ))
            optlength="${#long}"
            arglength="${#argname}"
            (( numchars = optlength + shortlen + arglength ))
            usage_content+="$(_usage_wrap_string "$opt_exp")"
            if [[ "$numchars" -gt "$reserved" ]]; then
                # Too long — print on one line, wrap description
                usage_content+="$(_usage_print_long_string "$short" "$comma" "$long" "$argname")"
            else
                usage_content+="$(_usage_print_string "$short" "$comma" "$long" "$argname")"
            fi
            options_content+="$(_option_setup_string $short $long)"
            bool=true
            if [[ "${data[_${opt_name}_bool_]}" == "false" ]]; then
                # Option does not have the bool flag - requires argument
                options_content+="$(_requires_arg_string "$opt_name")"
                if [[ -v data[_${opt_name}_default_] ]]; then
                    option_default_value="${data["_${opt_name}_default_"]}"
                    defaults+="$(_default_string "$opt_name" false "$option_default_value")"
                else
                    defaults+="$(_default_string "$opt_name" true)
"
                    if [[ "${data[_${opt_name}_required_]}" == "true" ]]; then
                        handle_required+="$(_handle_required_string "$opt_name" "$short" "$long")"
                   fi
                fi
            else
                # Option has the bool flag
                options_content+="$(_no_arg_string "$opt_name")"
                defaults+="$(_default_string "$opt_name" false false)"
            # fi
            fi
        fi
    done
    _parse_func_string "$defaults" "$options_content" "$handle_required" "${data[_has_usage_]}"
    args=(
        "${data["_cmd_name_"]}"
        "${data["_description_"]}"
        "${data["_usage_line_"]}"
        "${data["_pre_message_"]}"
        "${data["_post_message_"]}"
        "$usage_content"
    )
    # If user wants usage function...
    if [[ "${data[_has_usage_]}" == "true" ]]; then
       _set_usage_function "${args[@]}"
    fi
}

# ##############################################################################
# This is the format of the input which gets passed to "_paropts_add_all"
# This was the original way for the user to put input, but was significantly too
# clunky
# It's remaining here to make it easier to maintain the code
#
# declare -A data_arr=(
#     ['aaa']="a option-a"  # space-separated equivalent options
#     ['_aaa_explanation_']="This does a thing..."  # description of option 'aaa'
#     ['_aaa_default_']="Default"  # optional default value to assign to option
#     ['__aaa_name_arg_']="FIRSTARG"  # name of arg to appear in paropts_usage
#     ['b']="b"
#     ['_b_explanation_']="This does something else"
#     ['_b_bool_']=true # is the otpion boolean (true if used, false otherwise)?
#     ['ccc']="cc-c"
#     ['_ccc_explanation_']="Yet another thing XXX"
#     ['_ccc_default_']="Default value of 'ccc'"
#     ['dopt']="ddd d"
#     ['_dopt_explanation_']="Description of 'dopt'"
#     ['_dopt_required_']=true  # is the option required?
#
#     # Info for 'usage' function (optional, unless '_has_usage_' is set to true)
#     ['_has_usage_']=true  # have the usage function?
#     ['_cmd_name_']="test-cmd"  # name of command/script to be called by user
#     ['_description_']="$description"  # descr. of cmd displayed in 'usage'
#     ['_pre_message_']="$pre_message"  # optional mssg for start of 'usage'
#     ['_post_message_']="$post_message"  # optional mssg for end of 'usage'
#     ['_usage_line_']="USAGE a-command [OPTION]... [FILE]..."  # replace usage line?
# )
# ##############################################################################

# Clear the whole data array. User can source this script more than once in a
# script if they want more than one output file
declare -A data_arr=()
paropts_add() {
    # Initialise positional array
    positional=()
    required=false
    bool=false
    # Also reset variables so it doesn't take them from previous function calls
    unset default
    unset explanation
    unset name_arg
    while [[ $# -gt 0 ]]; do  # loop through all arguments
        if [[ "$1" =~ ^- ]]; then  # sort those starting with a dash
            case "$1" in
                -b|--bool)
                    bool=true
                    shift
                    ;;
                -d|--default)
                    _checkargs "$1" "$2"
                    default="$2"
                    shift
                    shift
                    ;;
                -e|--explanation)
                    _checkargs "$1" "$2"
                    explanation="$2"
                    shift
                    shift
                    ;;
                -n|--name-arg)
                    _checkargs "$1" "$2"
                    name_arg="$2"
                    shift
                    shift
                    ;;
                -r|--required)
                    required=true
                    shift
                    ;;
                --)
                    shift
                    break
                    ;;
                *)
                    printf "ERROR: Incorrect option %s\n" "$1" >&2
                    exit 1
                    ;;
            esac
        else
            positional+=("$1")
            shift
        fi
    done
    while [[ $# -gt 0 ]]; do
        # Deal with positional arguments after --
        positional+=("$1")
        shift
    done
    # Now we take the first positional argument (mandatory) as the name of the
    # option, then the second (mandatory) as the list of options separated by
    # semi-colon
    if [[ "${#positional[@]}" -lt 2 ]]; then
        printf "ERROR: Positional arguments missing - two required\n" >&2
        exit 1
    fi
    optname="${positional[0]}"
    # Sanitise optname, as it has to be a legitimate variable name
    if [[ ! "$optname" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        printf "ERROR: Invalid option name: '%s'. Must obey variable naming rules\n" "${optname}" >&2
        exit 1
    fi
    # Split up optionset, by replacing occurences of ";" with " "
    IFS=';' read -a alt_options <<< "${positional[1]}"
    data_arr["$optname"]="${alt_options[@]}"
    # We explicilty unset array keys if not needed because they may have been
    # set in a previous go
    if [ "$bool" == true -a "$required" == true ]; then
        printf "ERROR: bool (-b/--bool) and required (-r/--required) are incompatible\n" >&2
        exit 1
    fi
    data_arr["_${optname}_bool_"]="$bool"
    if [ -v "default" ]; then
        if [ "$required" = true ]; then
            printf "ERROR: default (-d/--default) and required (-r/--required) are incompatible\n" >&2
            exit 1
        fi
        if [ "$bool" = true ]; then
            printf "ERROR: default (-d/--default) and bool (-b/--bool) are incompatible\n" >&2
            exit 1
        fi
        data_arr["_${optname}_default_"]="$default"
    else
        unset data_arr["_${optname}_default_"]
    fi
    if [ -v "explanation" ]; then
        data_arr["_${optname}_explanation_"]="$explanation"
    else
        unset data_arr["_${optname}_explanation_"]
    fi
    if [ -v "name_arg" ]; then
        data_arr["_${optname}_name_arg_"]="$name_arg"
    else
        unset data_arr["_${optname}_name_"]
    fi
    data_arr["_${optname}_required_"]="$required"
}

paropts_setup() {
    positional=()
    data_arr["_has_usage_"]=false
    data_arr["_post_message_"]=""
    data_arr["_pre_message_"]=""
    data_arr["_usage_line_"]=""
    while [[ "$#" -gt 0 ]]; do  # loop through all arguments
        if [[ "$1" =~ ^- ]]; then  # sort those starting with a dash
            case "$1" in
                -a|--after)
                    _checkargs "$1" "$2"
                    data_arr["_post_message_"]="$2"
                    shift
                    shift
                    ;;
                -b|--before)
                    _checkargs "$1" "$2"
                    data_arr["_pre_message_"]="$2"
                    shift
                    shift
                    ;;
                -d|--description)
                    _checkargs "$1" "$2"
                    data_arr["_description_"]="$2"
                    shift
                    shift
                    ;;
                --ul|--usage-line)
                    _checkargs "$1" "$2"
                    data_arr["_usage_line_"]="$2"
                    shift
                    shift
                    ;;
                -u|--usage)
                    data_arr["_has_usage_"]=true
                    shift
                    ;;
                --)
                    shift
                    break
                    ;;
                *)
                    printf "ERROR: Incorrect option %s\n" "$1" >&2
                    exit 1
                    ;;
            esac
        else
            positional+=("$1")
            shift
        fi
    done
    while [[ $# -gt 0 ]]; do
        # Deal with positional arguments after --
        positional+=("$1")
        shift
    done
    if [[ "${#positional[@]}" -lt 1 ]]; then
        printf "Positional arguments missing - one required\n" >&2
        exit 1
    fi
    data_arr["_cmd_name_"]="${positional[0]}"
}

paropts_finalize() {
    # Set up file to write to
    if [[ ! "$#" -eq 0 ]]; then
        options_filename="$1"
    else
        printf "ERROR: No file name provided to paropts_finalize\n" >&2
        exit 1
    fi
    _paropts_add_all data_arr
}
